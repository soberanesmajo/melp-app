{"version":3,"sources":["Components/Header/Header.js","Components/Input/Input.js","Components/Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Input","id","selected","value","Component","Cards","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filteringForRating","rating","state","dataCard","map","element","sort","reverse","console","log","filteringAlphabetically","name","newArray","Data","forEach","site","contact","phone","street","address","city","push","setState","Components_Input_Input","App","Components_Header_Header","Components_Cards_Cards","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4x+BAYeA,SATA,kBACXC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBCaOC,0LAZP,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBE,GAAG,sBACjCL,EAAAC,EAAAC,cAAA,UAAQI,UAAQ,GAAhB,kBACAN,EAAAC,EAAAC,cAAA,UAAQK,MAAM,KAAd,WACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,KAAd,gCARAC,cCuFDC,qBApFf,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiCJI,mBAAqB,WACjB,IACMC,EAASR,EAAKS,MAAMC,SAASC,IAAI,SAAAC,GAEnC,OADgBA,EAAQJ,SAG5BA,EAAOK,OAAOC,UACdC,QAAQC,IAAIR,IAzCFR,EAiDdiB,wBAA0B,WACRjB,EAAKS,MAAMC,SAASC,IAAI,SAAAC,GAElC,OADeA,EAAQM,OAGrBL,QApDNb,EAAKS,MAAQ,CACTC,SAAS,IAHHV,mFAQV,IAAMmB,EAAW,GACJC,EAAKC,QAAQ,SAAAT,GACtB,IASIF,EAAW,CACXQ,KAVON,EAAQM,KAWfV,OATSI,EAAQJ,OAUjBc,KATOV,EAAQW,QAAQD,KAUvBE,MATQZ,EAAQW,QAAQC,MAUxBC,OATSb,EAAQc,QAAQD,OAUzBE,KAROf,EAAQc,QAAQC,KASvBlB,MAROG,EAAQc,QAAQjB,OAU3BU,EAASS,KAAKlB,KAGlBP,KAAK0B,SAAS,CAACnB,SAASS,qCA+BxB,OAFAhB,KAAKI,qBACLJ,KAAKc,0BAED3B,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACnBH,EAAAC,EAAAC,cAACsC,EAAD,MACK3B,KAAKM,MAAMC,SAASC,IAAI,SAAAC,GACrB,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAemB,EAAQM,MACrC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,WAAoCmB,EAAQJ,QAC5ClB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAamB,EAAQa,QAClCnC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAamB,EAAQe,MAClCrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAamB,EAAQH,OAClCnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAamB,EAAQY,mBA3E9C1B,cCoBLiC,0LATX,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,cAbUnC,cCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3fe69825.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css'\n\nconst Header = () => (\n    <header className=\"header\">\n        <h1 className=\"type\">Melp</h1>\n    </header>\n)\n        \n    \n\n\nexport default Header;","import React, {Component} from 'react';\nimport './input.css';\n\nclass Input extends Component {\n    render (){\n        //console.log(this.props);\n        return(\n            <div className=\"input input-group mb-3\">\n                <select className=\"custom-select\" id=\"inputGroupSelect01\">\n                    <option selected>Filtrar por...</option>\n                    <option value=\"1\">Raiting</option>\n                    <option value=\"2\">Orden alfab√©tico</option>\n                </select>\n            </div>\n        )\n    }\n}\n\nexport default Input;","import React, {Component} from 'react';\nimport Data from '../../data_melp.json';\nimport Input from '../Input/Input';\nimport './cards.css';\n\nclass Cards extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dataCard:[]\n        }\n    }\n\n    componentDidMount () {\n        const newArray = [];\n        const info = Data.forEach(element => {\n            let name = element.name;\n            //console.log(name);    \n            let rating = element.rating;\n            let site = element.contact.site;\n            let phone = element.contact.phone; \n            let street = element.address.street;\n            //console.log(street);\n            let city = element.address.city;\n            let state= element.address.state;\n            let dataCard = {\n                name: name,\n                rating: rating,\n                site: site,\n                phone: phone,\n                street: street,\n                city: city,\n                state: state\n            }\n            newArray.push(dataCard);\n        });\n        //console.log(newArray);\n        this.setState({dataCard:newArray});\n    }\n    \n    filteringForRating = () => {\n        const ratingArray = [];\n        const rating = this.state.dataCard.map(element => {\n            const oRating = element.rating;\n            return oRating;\n        })\n        rating.sort().reverse();\n        console.log(rating);\n        // const ratingObj = {\n        //     rating: rating\n        // }\n        // ratingArray.push(ratingObj);\n        // console.log(ratingArray);\n    }\n\n    filteringAlphabetically = () => {\n        const names = this.state.dataCard.map(element => {\n            const oNames = element.name;\n            return oNames;\n        })\n        names.sort();\n        //console.log(names);\n    }\n\n\n    render () {\n        this.filteringForRating();\n        this.filteringAlphabetically();\n        return (\n            <section className=\"container\">\n            <Input />\n                {this.state.dataCard.map(element => {\n                    return(\n                        <div className=\"card\">\n                            <h4 className=\"card-header\">{element.name}</h4>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Rating: {element.rating}</h5>\n                                <p className=\"card-text\">{element.street}</p>\n                                <p className=\"card-text\">{element.city}</p>\n                                <p className=\"card-text\">{element.state}</p>\n                                <p className=\"card-text\">{element.phone}</p>\n                            </div>\n                        </div>\n                    )\n                })}\n            </section>\n        )\n    }       \n}\n    \n    export default Cards;\n\n","import React, { Component } from 'react';\nimport Header from './Components/Header/Header';\nimport Cards from './Components/Cards/Cards';\n//import Data from './data_melp.json';\nimport './App.css';\n\nclass App extends Component {\n\n  // gettingData = (Data) =>{\n  //   console.log(Data);\n    \n  // }\n\n  \n  render() {\n    //this.gettingData(Data)\n    return (\n      <div className=\"App\">\n        <Header />\n        <Cards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}